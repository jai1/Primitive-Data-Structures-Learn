package org.bitsight;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Scanner;

class Bin {
	Integer fromKey;
	Integer toKey;
	Integer numberOfContentions;
	Integer sizeWithoutContention;
	
}

public class Partitioner {
	
	LinkedHashMap<Integer, Integer> map ;
	ArrayList<Bin> bins;
	public Partitioner() {
		map = new LinkedHashMap<Integer, Integer>();
	}
	
	public void run(String[] args){
		if(args.length<2) {
			System.out.println("Need Input File Name and Output File Name as arguments.");
		}			
		pareInputFile(args[0]);
		sortHashMap();
		applyGreedyToPopulateBins();
		createOutput(args[1]);
		return;
	}

	private static void pareInputFile(String string) {
		try {
			Scanner in = new Scanner(new File(string));
			if(in.hasNextInt())
				this.bins = new ArrayList<Bin>(in.nextInt());
			while (fileScanner.hasNextInt()){
				   integers.add(fileScanner.nextInt());
				}
	      }finally {
	         if (in != null) {
	            in.close();
	         }
	         if (
	}

}


