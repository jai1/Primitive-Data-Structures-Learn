package org.learn.interview;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

public class StringFunctions {

	/*
	 * Company:- Google, Microsoft
	 * Question:- WAP to reverse a string In place
	 * Examples:- "abc" => "cba"
	 */
	public String reverse(String in) {
		if(in == null)
			return "";
		StringBuilder input = new StringBuilder(in);
		Integer start = 0;
		Integer end = input.length() - 1;
		while(start < end) {
			char temp = input.charAt(start);
			input.setCharAt(start, input.charAt(end));
			input.setCharAt(end,temp);
			start++;
			end--;
		}
		return input.toString();
	}
	
	/*
	 * Company:- Microsoft
	 * Question:- Reverse a sentence
	 * Example:- "Jai is" => "is Jai"
	 * "Wow! This is boring." => "boring. is This Wow!"
	 */ 
	public String reverseSentence(String in) {
		if(in==null) return "";
		int k = in.indexOf(" ");
		if(k == -1)
			return in;
		else
			return reverseSentence(in.substring(k+1)) + " " + in.substring(0,k);
	}
	
	/*
	 * Company:- Sev One
	 * Question:- Number++ if input is a number else reverse the String.
	 * Example:- ".2" => "1.2"
	 * "-1.2" => "-0.2"
	 * "abc" => "cba"
	 * "" => ""
	 */
	public String reverseOrAdd(String in) {
		if(in.isEmpty())
			return "";
		if(in.matches("-?\\d*(\\.\\d+)?"))
			return Float.toString(convertToFloat(in) + 1);
		else
			return reverse(in);
	}
	
	/*
	 * Company:- Bloomberg, Microsoft
	 * Question:- write itoa or ftoa
	 * Examples:- ".2" => 0.2f
	 * "-.1" => -0.1f
	 * "-23" => -23f
	 * "-2.23" => -2.23f
	 */
	public float convertToFloat(String in) {
		float f = 0.0f;
		boolean isNegative = (in.charAt(0) == '-');
		Integer k = in.indexOf('.');
		Integer divideBy = 0;
		if(k != -1)
			divideBy =  (in.length() - 1) - k;
		for(int i = isNegative?1:0 ; i<in.length(); i++) {
			if(in.charAt(i) == '.')
				continue;
			else
				f = (f*10) + (in.charAt(i) - '0');
		}
		f = (float) (f / Math.pow(10, divideBy));
		if(isNegative)
			f *= -1;
		return f;
	}
	
	/*
	 * Company:- Avaya
	 * Question:- Given a 2D Array of characters, find if the 
	 * 			  given word can be formed i.e each character is
	 * 			  adjacent to each other and used exactly once.
	 * Example:-	["ABCAE"]
	 * 				["CERTA"]
	 * 				["PILOC"]
	 * 
	 * "CERTO" => true
	 * "ABCT" => false
	 * "ATOLRECABC" => true 
	 * "ATOLRECABCA" => false 
	 * "ATOLRECABCRTA" => true 
	 */
	boolean boardContainsWord(char[][] board, String word){
		//System.out.println("++++++++++++++++++++++++++++++++");
		//System.out.println("Word is " + word);
		List<Point> trailSoFar = new ArrayList<Point>();
		for(int i = 0; i<board.length; i++) {
			for(int j =0; j<board[i].length; j++) {
				Point p = new Point(i,j);
				if(boardContainsWordHelper(board, word, p, trailSoFar, 0, null))
					return true;
			}
		}
		//System.out.println("++++++++++++++++++++++++++++++++");
		return false;
	}

	
	/*
	 * Need visited array since its DFS and we don't want go in 
	 * circles, also visited is not for entire word. It is only 
	 * valid for that letter.
	 * Need trailSoFar because if we used a letter before, we are 
	 * not allowed to use it again. 
	 */
	
	private boolean boardContainsWordHelper(char[][] board, String word, Point p, List<Point> trailSoFar, int i, List<Point> visited) {
		
		if(visited == null)
			visited = new ArrayList<Point>();
		
		if(i>=word.length())
			return true;
		
		
		if( i<0 ||
			p.x < 0 || p.y<0 ||
			p.x >= board.length || p.y >= board[(int) p.x].length ||
			trailSoFar.contains(p) ||
			visited.contains(p) ||
			word.charAt(i) != board[(int) p.x][(int) p.y] )
			return false;
		

		trailSoFar.add(p);
		visited.add(p);
		//System.out.println(trailSoFar);
		i+=1;
		return ((boardContainsWordHelper(board, word, new Point(p.x+1,p.y), trailSoFar, i, null)) ||
				(boardContainsWordHelper(board, word, new Point(p.x-1,p.y), trailSoFar, i, null)) ||
				(boardContainsWordHelper(board, word, new Point(p.x,p.y+1), trailSoFar, i, null)) ||
				(boardContainsWordHelper(board, word, new Point(p.x,p.y-1), trailSoFar, i, null)) ||
				((trailSoFar.remove(p)) &&
				(boardContainsWordHelper(board, word, p, trailSoFar, --i,visited ))));
	}
	
	/*
	 * Company: Yelp
	 * Question: Check if a string can be converted into a palindrome
	 * Example:-
	 * 	"JaJai" => true ("JaiaJ')
	 *  "JaJail" => False
	 */
	boolean canBePalindrome(String s) {
		HashMap<Character, Short> m = new HashMap<Character, Short>(); 
		for(int i=0; i<s.length(); i++) {
			Character c = s.charAt(i);
			if(m.containsKey(c))
				m.put(c, (short) ((m.get(c) + 1) % 2));
			else
				m.put(c, (short) 1);
		}
		//System.out.println(m);
		boolean firstTime = true;
		for(Character c:m.keySet()) {
			if(m.get(c) == 1 && !firstTime)
				return false;
			if(m.get(c) == 1)
				firstTime = false;
		}
		return true;
	}
	
	/* 
	 * Company:- Google
	 * Question:-
	 * Write an algorithm to construct run length encodings of
	 * arbitrary strings where repeated instances of the same character
	 * get replaced with
	 * [number of times character appears] + [character].
	 * For example, "xxxxxx" becomes "6x" and "x" remains "x".
	 * It should be unambiguous and the compressed string should always
	 * be shorter. 
	 * Example:-.
	 *   "Jaii" => "Ja2i" 
	 *   'aaabcccc" => "3ab4c"  
	 *  TO DO:- Try in place
	 */
	public String compressString(String str) {
		if(str == null || str.length() < 2)
			return str;
		String newStr = "";
		int temp = 1;
		char ch = str.charAt(0);
		
		for (int i = 1; i < str.length(); i++ ) {
			if(ch == str.charAt(i))
				temp++;
			else if(temp > 1) {
				newStr += Integer.toString(temp) + ch;
				temp = 1;
			}
			else {
				newStr += ch;
				temp = 1;
			}
			ch = str.charAt(i);
		}
		if(temp > 1)
			newStr += Integer.toString(temp) + ch;
		else
			newStr += ch;
		return newStr;
	}
	
	/*
	 * Recursive solution
	 */
	public String recursiveCompressString(String str) {
		if(str == null || str.length() < 2)
			return str;
		return recursiveCompressStringHelper(str.substring(1), str.charAt(0), 1);
	}
	
	/*
	 * Invariants:- ch is the previous character in the String
	 * occurrence is the number of times the character is repeated
	 */
	
	public String recursiveCompressStringHelper(String str, Character ch, Integer occ) {
		// Termination Condition
		if(str.length() == 0) {
			return (occ > 1) ? occ + ch.toString() : ch.toString();
		}
		//System.out.println(str +"," + ch + "," + occ);
		
		if(ch.equals(str.charAt(0)))
			return recursiveCompressStringHelper(str.substring(1),ch, occ + 1);
		else if(occ > 1)
			return occ + ch.toString() + recursiveCompressStringHelper(str.substring(1), str.charAt(0), 1);
		else
			return ch.toString() + recursiveCompressStringHelper(str.substring(1), str.charAt(0), 1);
	}
		
	/*
	 * Company:- HP 
	 * Question:- Find the FIRST non repeating element in an array
	 * Examples:-
	 * 	"aaaaabccccbdeefghhh"  	=> b
	 *  "aabbcc"				=> null
	 * Solution:- Since we need to find the first non repeating, we need to use a Linked HashMap. 
	 * Normal Hashmap wont do
	 */
	Character firstNonRepeating(String str) {
		LinkedHashMap<Character, Integer> lmap = new LinkedHashMap<Character, Integer>();
		for(int i = 0; i<str.length(); i++) {
			Character ch = str.charAt(i);
			if(lmap.containsKey(ch))
				lmap.put(ch, lmap.get(ch));
			else 
				lmap.put(ch, 1);
		}
		for(Character ch : lmap.keySet()) {
			if(lmap.get(ch) == 1)
				return ch;
		}
		return null;
	}
	
	public int getMinTimeDifference(String[] times) {
		if(times == null || times.length == 0)
			return 0;
		List<Integer> li = new ArrayList<Integer>();
		for(String time:times) {
			String[] temp = time.split(":");
			li.add(Integer.valueOf(temp[0]) * 60 + Integer.valueOf(temp[1]) );
		}
		
		Integer temp = Integer.MAX_VALUE;
		Collections.sort(li);
		
		System.out.println(li);
		for(int i = 0; i<li.size() - 1; i++) {
			if(temp > (li.get(i+1) - li.get(i)))
				temp = (li.get(i+1) - li.get(i));
		}
		
		if(temp > (1440 - li.get(li.size()-1) + li.get(0)))
			temp = (1440 - li.get(li.size()-1)) + li.get(0);
			
		return temp;


    }

    public String[] getSuspiciousList(String[] transactions) {
        // Person Name, Time Inserted
        HashMap<String, String> outMap = new HashMap<String, String>();
        HashMap<String, String> map = new HashMap<String, String>();
        for(String s : transactions) {
            String[] temp = s.split("|");
            
            String name = temp[0];
            Integer amount = Integer.valueOf(temp[1]);
            String location = temp[2];
            Integer time = Integer.valueOf(temp[3]);
            
            
        }

    }

	
}
