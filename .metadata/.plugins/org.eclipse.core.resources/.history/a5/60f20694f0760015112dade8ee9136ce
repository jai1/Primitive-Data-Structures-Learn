package org.bitsight;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Scanner;
import java.util.TreeMap;

class Bin {
	Integer fromKey;
	Integer toKey;
	Integer idealSize;
	Integer actualSize;
	
	Bin (Integer idealBinSize) {
		idealSize = idealBinSize;
		fromKey = 0;
		actualSize = 0;
		toKey = 0;
	}
	
}

public class Partitioner {

	TreeMap<Integer, Integer> map;
	Integer numberOfBins;

	public Partitioner() {
		map = new TreeMap<Integer, Integer>();
	}

	public void run(String[] args) {
		if (args.length < 2) {
			System.out.println("Need Input File Name and Output File Name as arguments.");
		}
		pareInputFile(args[0]);
		System.out.println(map.toString());
		populateBins();
		//createOutput(args[1]);
		return;
	}

	private void populateBins() {
		Bin[] b = new Bin[numberOfBins];
		Integer binNumber = 0;
		Integer idealbinSize = map.size() /  numberOfBins;
		
		for(Integer i: map.keySet()) {
			if()
			System.out.println(i + ":" + map.get(i));
		}
		
	}

	private void pareInputFile(String string) {
		Scanner in = null;
		try {
			in = new Scanner(new File(string));
			if (in.hasNextInt())
				numberOfBins = in.nextInt();
			while (in.hasNextInt()) {
				Integer i = in.nextInt();
				if (map.containsKey(i))
					map.put(i, map.get(i) + 1);
				else
					map.put(i, 1);
			}
		} catch (Exception e) {
			System.out.println("Exception Occured: " + e.toString());
		} finally {
			if (in != null)
				in.close();
		}
	}
}
