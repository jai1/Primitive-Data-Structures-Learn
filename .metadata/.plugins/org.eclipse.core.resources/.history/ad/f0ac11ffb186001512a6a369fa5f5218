package org.learn.interview;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class StringFunctionsTest {
	StringFunctions obj = null;
	@Before
	public void setUp() throws Exception {
		obj = new StringFunctions();
	}

	@Test
	public void reverseStringTest() {
		assertEquals(obj.reverse("Jai is bored"), "derob si iaJ");
		assertEquals(obj.reverse("Jai"), "iaJ");
		assertEquals(obj.reverse("abcd"), "dcba");
	}
	
	@Test
	public void reverseSentenceTest() {
		assertEquals(obj.reverseSentence(null), "");
		assertEquals(obj.reverseSentence("abc"), "abc");
		assertEquals(obj.reverseSentence("Wow! This is boring."), "boring. is This Wow!");
	}

	@Test
	public void convertToFloatTest() {
		assertEquals(obj.convertToFloat(".2"), 0.2, 0.1);
		assertEquals(obj.convertToFloat("-.1"), -0.1, 0.1);
		assertEquals(obj.convertToFloat("-23"), -23, 0.1);
		assertEquals(obj.convertToFloat("2.23"), 2.23, 0.1);
	}
	
	@Test
	public void reverseOrAddTest() {
		assertEquals(obj.reverseOrAdd(".2"), "1.2");
		assertEquals(obj.reverseOrAdd("-.1"), "0.9");
		assertEquals(obj.reverseOrAdd("-23"), "-22.0");
		assertEquals(obj.reverseOrAdd("2.23"), "3.23");
		assertEquals(obj.reverseOrAdd("jai"), "iaj");
		assertEquals(obj.reverseOrAdd("-1,2"), "2,1-");
		assertEquals(obj.reverseOrAdd("-1 "), " 1-");
	}
	
	@Test
	public void boardContainsWordTest() {
		char[][] board = {{'A', 'B', 'C', 'A', 'E'}
						, {'C', 'E', 'R', 'T', 'A'}
						, {'P', 'I', 'L', 'O', 'C'}};
		assertTrue(obj.boardContainsWord(board, "CERTO"));
		assertFalse(obj.boardContainsWord(board, "ABCT"));
		assertTrue(obj.boardContainsWord(board, "ATOLRECABC"));
		assertTrue(obj.boardContainsWord(board, "ATOLRECABCA"));
		assertFalse(obj.boardContainsWord(board, "ATOLRECABCAA"));
		
		assertTrue(obj.boardContainsWord(board, "ATOLRECPI"));
	}

	@Test
	public void canConvertToPalindrome() {
		String s = "JaiaJ";
		assertTrue(obj.canBePalindrome(s));
		
		s = "JaaJ";
		assertTrue(obj.canBePalindrome(s));
		
		s = "JaJai";
		assertTrue(obj.canBePalindrome(s));
		
		s = "JaJaii";
		assertTrue(obj.canBePalindrome(s));
		
		s = "JaJail";
		assertFalse(obj.canBePalindrome(s));
	}
	
	@Test
	public void compressStringTest() {
		assertEquals(obj.compressString("Jai"), "Jai");
		assertEquals(obj.compressString("Jaii"), "Ja2i");
		assertEquals(obj.compressString("i"), "i");
		assertEquals(obj.compressString(""), "");
		assertEquals(obj.compressString("aabbbbcddde"), "2a4bc3de");
	}
	
	@Test
	public void recursiveCompressStringTest() {
		assertEquals(obj.recursiveCompressString("Jai"), "Jai");
		assertEquals(obj.recursiveCompressString("Jaii"), "Ja2i");
		assertEquals(obj.recursiveCompressString("i"), "i");
		assertEquals(obj.recursiveCompressString(""), "");
		assertEquals(obj.recursiveCompressString("aabbbbcddde"), "2a4bc3de");
	}

	@Test
	public void getMinTimeDifferenceTest() {
		String[] data1 = null;
		String[] data2 = {
				"10:00", "19:20", "06:45", "00:12", "23:50", "04:22"
		};
		String[] data3 = {
				"10:00", "19:20", "06:45", "00:13", "23:50", "04:22", "23:59"
		};
		
		String[] data4 = {
				"10:00", "19:20", "06:45", "00:03", "23:50", "04:22", "23:59"
		};
		assertEquals(obj.getMinTimeDifference(data1), 0);
		assertEquals(obj.getMinTimeDifference(data2), 22);
		assertEquals(obj.getMinTimeDifference(data3), 9);
		assertEquals(obj.getMinTimeDifference(data4), 4);
	}
	
	@Test
	public void getSuspiciousListTest() {
		String[] data1 = {
				"Shilpa|500|California|63", 
				"Tom|25|New York|615", 
				"Krasi|9000|California|1230", 
				"Tom|25|New York|1235" ,
				"Tom|25|New York|1238" ,
				"Shilpa|50|Michigan|1300", 
				"Matt|90000|Georgia|130S" ,
				"Jay|100000|Virginia|1310" ,
				"Krasi|49|Florida|1320" ,
				"Krasi|83|California|1325", 
				"Shilpa|50|California|13SO" 

		};
	}
}


